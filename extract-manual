#!/bin/sh

#
# extract-manual - get ahold of the latest manual and unpack it for use
#

# Look for built files, then built tar-file in each of these in turn
locations="/home/web/firehol/download/unsigned/master/ $HOME/src/firehol"

scriptname=extract-manual
if ! MYTMP=$(mktemp -d -t $scriptname-XXXXXX)
then
            echo >&2
            echo >&2
            echo >&2 "Cannot create temporary directory."
            echo >&2
            exit 1
fi

cleanup() {
  status=$?
  rm -rf "${MYTMP}"
  exit $status
}

# clean up if we get stopped by Crtl-C or forced logout or normal exit
trap cleanup INT
trap cleanup HUP
trap cleanup 0

set -e

mode=single
src=
for l in $locations
do
  if [ -f $l/doc/firehol-manual.html ]
  then
    src=$l/doc
    echo "Extracting manual from $l/doc"
    break
  fi
  if [ -f $l/doc/firehol/firehol-manual.html ]
  then
    src=$l/doc
    mode=separate
    echo "Extracting manual from $l/doc"
    break
  fi
  if [ $(ls $l/firehol-*.tar.gz 2> /dev/null | wc -l) -eq 1 ]
  then
    echo "Extracting manual from" $l/firehol-*.tar.gz
    tar xfzC $l/firehol-*.tar.gz $MYTMP
    if [ -f $MYTMP/firehol*/doc/firehol-manual.html ]
    then
      src=$(ls -d $MYTMP/firehol*/doc 2> /dev/null)
      break
    elif [ -f $MYTMP/firehol*/doc/firehol/firehol-manual.html ]
    then
      src=$(ls -d $MYTMP/firehol*/doc 2> /dev/null)
      mode=separate
      break
    else
      # Docs not in this tar, continue looking
      rm -rf $MYTMP/firehol*
    fi
  fi
done

if [ ! "$src" ]
then
  1>&2 echo "No single tar.gz or built docs found in expected locations"
  1>&2 echo "  ($locations)"
  exit 1
fi

if [ $mode = "single" -a ! -f $src/contents.md ]
then
  echo "Old-style manual: no longer supported"
  exit 1
fi

if [ $mode = "separate" -a ! -f $src/firehol/contents.md ]
then
  echo "New-style manual: missing firehol contents"
  exit 1
fi

if [ $mode = "separate" -a ! -f $src/fireqos/contents.md ]
then
  echo "New-style manual: missing fireqos contents"
  exit 1
fi

if [ $mode = "separate" -a ! -f $src/vnetbuild/contents.md ]
then
  echo "New-style manual: missing vnetbuild contents"
  exit 1
fi

process() {
  echo "Importing pandoc directly to website: $2 .. $3"
  base="$1"
  doc="$2"
  dest="$3"

  rm -rf content/$dest
  mkdir -p content/$dest
  cd content/$dest || exit 1

  for i in $doc/*.md
  do
    o=$(basename $i)
    # Remove manpage headers and change references into the final website form
    sed -e '1i---' \
        -e '1isubmenu: documentation' \
        -e '4i---' \
        -e '1s/^% \([^ ]*\) .*/title: Reference Manual - \1\ndescription: \1 Reference Manual\nkeywords: firewall, linux, free, gpl, manual, reference, \1/p' \
        -e '1,3d' \
        -e '/^%/d' \
        -e 's;\.[0-9]*\.md;.md;g' \
        -e "s;(\([^)]*\)\.md\([^)]*\));(/$dest/\1/\2);" \
        -e 's;http://firehol.org/;/;g' $i > $o

    # Import cleaned links into each page
    cat ../../tmp/links* ../../tmp/service-links >> $o
  done

  mv contents.md ../$dest.md
  cd ../..
}

mkdir -p tmp
for i in  $src/links* $src/service-links
do
  j=$(basename $i)

  dest=firehol-manual
  case $i in
    *fireqos)
      dest=fireqos-manual
    ;;
    *vnetbuild)
      dest=vnetbuild-manual
    ;;
  esac

  # Import links from manual, cleaning up anchors that are not available
  # in the separate-page versions.
  sed -e 's;\.[0-9]*\.md;.md;g' \
      -e "s;: \(.*\)\.md\(.*\);: /$dest/\1/\2;" $i | \
    awk -F/ '/^[[]/ { anchor=$NF; page=$(NF-1); a=anchor; sub(/^#/, "", a);
                      sub(/[0-9]*$/, "", a); gsub(/[^a-z0-9_-]/, "-", a);
                      if (a == page) { sub(anchor "$", "") }
                    }
            { print }' > tmp/$j
done

if [ $mode = separate ]
then
  process $src $src/firehol firehol-manual
  process $src $src/fireqos fireqos-manual
  process $src $src/vnetbuild vnetbuild-manual
else
  process $src $src manual
  rm -f content/manual/README.md
fi
